package river;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.EnumMap;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 * Graphical interface for the River application
 * 
 * @author sugie
 */
public class RiverGUI
    extends JPanel
    implements MouseListener
{

    // ==========================================================
    // Fields (hotspots)
    // ==========================================================

    private final Rectangle          leftBoatRectangle  = new Rectangle(140, 275, 110, 50);
    private final Rectangle          rightBoatRectangle = new Rectangle(550, 275, 110, 50);
    private final Rectangle          baseLeftRectangle  = new Rectangle(20, 275, 50, 50);
    private final Rectangle          baseRightRectangle = new Rectangle(670, 275, 50, 50);
    private final int[]              dx                 = { 0, 60, 0, 60 };
    private final int[]              dy                 = { 0, 0, -60, -60 };

    // ==========================================================
    // Private Fields
    // ==========================================================

    private GameEngine               engine; // Model
    private EnumMap<Item, Rectangle> rectMap;
    private Rectangle                boatRectangle;


    // ==========================================================
    // Constructor
    // ==========================================================

    /**
     * Create a new RiverGUI object.
     */
    public RiverGUI()
    {
        engine = new FarmerGameEngine();
        rectMap = new EnumMap<>(Item.class);
        rectMap.put(Item.ITEM_0, getRectangleOffsetBy(baseLeftRectangle, dx[0], dy[0]));
        rectMap.put(Item.ITEM_1, getRectangleOffsetBy(baseLeftRectangle, dx[1], dy[1]));
        rectMap.put(Item.ITEM_2, getRectangleOffsetBy(baseLeftRectangle, dx[2], dy[2]));
        rectMap.put(Item.ITEM_3, getRectangleOffsetBy(baseLeftRectangle, dx[3], dy[3]));
        boatRectangle = leftBoatRectangle;
        addMouseListener(this);
    }


    // ==========================================================
    // Paint Methods (View)
    // ==========================================================

    @Override
    public void paintComponent(Graphics g)
    {
        g.setColor(Color.GRAY);
        g.fillRect(0, 0, this.getWidth(), this.getHeight());
        paintItem(g, Item.ITEM_0);
        paintItem(g, Item.ITEM_1);
        paintItem(g, Item.ITEM_2);
        paintItem(g, Item.ITEM_3);
        paintBoat(g);
    }


    /**
     * Place a description of your method here.
     * 
     * @param g
     * @param item
     */
    private void paintItem(Graphics g, Item item)
    {
        Color color = engine.getItemColor(item);
        String label = engine.getItemLabel(item);
        Rectangle rectOne = getItemRectangle(item);
        paintRectangle(g, color, label, rectOne);

    }


    /**
     * Place a description of your method here.
     * 
     * @param g
     */
    private void paintBoat(Graphics g)
    {
        paintRectangle(g, Color.ORANGE, "", getBoatRectangle());
    }


    /**
     * Place a description of your method here.
     * 
     * @param item
     */
    private Rectangle getItemRectangle(Item item)
    {
        int pos = item.ordinal();
        switch (engine.getItemLocation(item))
        {
            case START:
                rectMap.put(item, getRectangleOffsetBy(baseLeftRectangle, dx[pos], dy[pos]));
                break;
            case FINISH:
                rectMap.put(item, getRectangleOffsetBy(baseRightRectangle, dx[pos], dy[pos]));
                break;
            case BOAT:
                Rectangle rect = getRectangleOffsetBy(getBoatRectangle(), dx[pos], dy[pos] - 60);
                rect.setSize(50, 50);
                rectMap.put(item, rect);
                break;
        }
        return rectMap.get(item);
    }


    /**
     * Place a description of your method here.
     */
    private Rectangle getBoatRectangle()
    {
        if (boatLocatedAtStart())
        {
            boatRectangle = leftBoatRectangle;
        }
        else if (boatLocatedAtFinish())
        {
            boatRectangle = rightBoatRectangle;
        }
        return boatRectangle;
    }


    /**
     * Place a description of your method here.
     * 
     * @param rect
     * @param dx1
     * @param dy1
     */
    private Rectangle getRectangleOffsetBy(Rectangle rect, int dx1, int dy1)
    {
        Rectangle rectThree = new Rectangle(rect);
        rectThree.translate(dx1, dy1);
        return rectThree;
    }


    /**
     * Place a description of your method here.
     * 
     * @param g
     * @param color
     * @param label
     * @param rect
     */
    private void paintRectangle(Graphics g, Color color, String label, Rectangle rect)
    {
        g.setColor(color);
        g.fillRect(rect.x, rect.y, rect.width, rect.height);
        g.setColor(Color.BLACK);
        g.setFont(new Font("Verdana", Font.BOLD, 36));
        FontMetrics fm = g.getFontMetrics();
        int strXCoord = rect.x + rect.width / 2 - fm.stringWidth(label) / 2;
        int strYCoord = rect.y + rect.height / 2 + 36 / 2 - 4;
        g.drawString(label, strXCoord, strYCoord);
    }


    // ==========================================================
    // Startup Methods
    // ==========================================================

    /**
     * Create the GUI and show it. For thread safety, this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI()
    {
        // Create and set up the window
        JFrame frame = new JFrame("RiverCrossing");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Create and set up the content pane
        RiverGUI newContentPane = new RiverGUI();
        newContentPane.setOpaque(true);
        frame.setContentPane(newContentPane);

        // Display the window
        frame.setSize(800, 600);
        frame.setVisible(true);
    }


    /**
     * Place a description of your method here.
     * 
     * @param args
     */
    public static void main(String[] args)
    {
        // Schedule a job for the event-dispatching thread:
        // creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(RiverGUI::createAndShowGUI);
    }


    // ==========================================================
    // MouseListener Methods (Controller)
    // ==========================================================

    @Override
    public void mouseClicked(MouseEvent e)
    {
        if (rectMap.get(Item.ITEM_0).contains(e.getPoint()))
        {
            respondToItemClick(Item.ITEM_0);
        }
        else if (rectMap.get(Item.ITEM_1).contains(e.getPoint()))
        {
            respondToItemClick(Item.ITEM_1);
        }
        else if (rectMap.get(Item.ITEM_2).contains(e.getPoint()))
        {
            respondToItemClick(Item.ITEM_2);
        }
        else if (rectMap.get(Item.ITEM_3).contains(e.getPoint()))
        {
            respondToItemClick(Item.ITEM_3);
        }
        else if (boatRectangle.contains(e.getPoint()))
        {
            engine.rowBoat();
        }
        repaint();

    }


    /**
     * Place a description of your method here.
     * 
     * @param item
     */
    public void respondToItemClick(Item item)
    {
        if (itemLocatedAtStart(item) && boatLocatedAtStart())
        {
            engine.loadBoat(item);
        }
        else if (itemLocatedAtFinish(item) && boatLocatedAtFinish())
        {
            engine.loadBoat(item);
        }
        else if (itemLocatedOnBoatAtStart(item) || itemLocatedOnBoatAtFinish(item))
        {
            engine.unloadBoat(item);
        }

    }


    // ----------------------------------------------------------
    // None of these methods will be used
    // ----------------------------------------------------------

    @Override
    public void mousePressed(MouseEvent e)
    {
        //
    }


    @Override
    public void mouseReleased(MouseEvent e)
    {
        //
    }


    @Override
    public void mouseEntered(MouseEvent e)
    {
        //
    }


    @Override
    public void mouseExited(MouseEvent e)
    {
        //
    }


    /**
     * Place a description of your method here.
     */
    private boolean itemLocatedAtStart(Item item)
    {
        return engine.getItemLocation(item) == Location.START;
    }


    /**
     * Place a description of your method here.
     */
    private boolean itemLocatedAtFinish(Item item)
    {
        return engine.getItemLocation(item) == Location.FINISH;
    }


    /**
     * Place a description of your method here.
     */
    private boolean boatLocatedAtStart()
    {
        return engine.getBoatLocation() == Location.START;
    }


    /**
     * Place a description of your method here.
     */
    private boolean boatLocatedAtFinish()
    {
        return engine.getBoatLocation() == Location.FINISH;
    }


    /**
     * Place a description of your method here.
     */
    private boolean itemLocatedOnBoatAtStart(Item item)
    {
        return engine.getItemLocation(item) == Location.BOAT && boatLocatedAtStart();
    }


    /**
     * Place a description of your method here.
     */
    private boolean itemLocatedOnBoatAtFinish(Item item)
    {
        return engine.getItemLocation(item) == Location.BOAT && boatLocatedAtFinish();
    }

}
